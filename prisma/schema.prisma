generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  clerkId           String?            @unique
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              UserRole           @default(USER)
  bio               String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  assignments       Assignment[]
  certificates      Certificate[]
  createdCourses    Course[]           @relation("CourseInstructor")
  enrollments       Enrollment[]
  sentNotifications Notification[]     @relation("SentNotifications")
  progress          Progress[]
  createdQuizzes    Quiz[]             @relation("QuizCreator")
  quizAttempts      QuizAttempt[]
  sessions          Session[]
  userBadges        UserBadge[]
  notifications     UserNotification[]
  uploadedVideos    VideoFile[]

  @@index([email])
  @@index([clerkId])
  @@index([role])
}

model Course {
  id            String           @id @default(cuid())
  title         String
  description   String
  thumbnail     String?
  price         Float            @default(0)
  status        CourseStatus     @default(DRAFT)
  accessCode    String?          @unique
  instructorId  String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  certificates  Certificate[]
  instructor    User             @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  categories    CourseCategory[]
  enrollments   Enrollment[]
  lessons       Lesson[]
  notifications Notification[]
  quizzes       Quiz[]

  @@index([status])
  @@index([instructorId])
  @@index([accessCode])
}

model Category {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  courses     CourseCategory[]
}

model CourseCategory {
  courseId   String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
}

model Lesson {
  id          String       @id @default(cuid())
  title       String
  description String?
  content     String?
  videoUrl    String?
  duration    Int?
  order       Int
  type        LessonType   @default(TEXT)
  isPublished Boolean      @default(false)
  courseId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignments Assignment[]
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]
  quizzes     Quiz[]
  videoFile   VideoFile?   @relation("LessonVideo")

  @@index([courseId])
  @@index([order])
}

model Enrollment {
  id            String           @id @default(cuid())
  userId        String
  courseId      String
  status        EnrollmentStatus @default(ACTIVE)
  progress      Float            @default(0)
  enrolledAt    DateTime         @default(now())
  completedAt   DateTime?
  paymentId     String?
  paymentStatus PaymentStatus    @default(PENDING)
  paymentAmount Float?
  paidAt        DateTime?
  course        Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model Progress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  timeSpent   Int?
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  lessonId     String?
  courseId     String?
  type         QuizType      @default(PRACTICE_QUIZ)
  timeLimit    Int?
  maxAttempts  Int           @default(3)
  passingScore Float         @default(70.0)
  totalPoints  Float         @default(100.0)
  isPublished  Boolean       @default(false)
  instructions String?
  createdBy    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  questions    Question[]
  course       Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator      User          @relation("QuizCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  lesson       Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts     QuizAttempt[]
}

model Question {
  id            String           @id @default(cuid())
  quizId        String
  type          QuestionType     @default(MULTIPLE_CHOICE)
  questionText  String
  explanation   String?
  points        Float            @default(1.0)
  order         Int              @default(0)
  options       Json?
  correctAnswer String?
  imageUrl      String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  quiz          Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       QuestionAnswer[]
}

model QuizAttempt {
  id            String           @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int              @default(1)
  score         Float            @default(0.0)
  maxScore      Float            @default(100.0)
  percentage    Float            @default(0.0)
  isPassed      Boolean          @default(false)
  startedAt     DateTime         @default(now())
  completedAt   DateTime?
  timeSpent     Int?
  status        AttemptStatus    @default(IN_PROGRESS)
  submittedAt   DateTime?
  feedback      String?
  answers       QuestionAnswer[]
  quiz          Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId, attemptNumber])
}

model QuestionAnswer {
  id           String      @id @default(cuid())
  questionId   String
  attemptId    String
  answer       String
  isCorrect    Boolean     @default(false)
  pointsEarned Float       @default(0.0)
  timeSpent    Int?
  createdAt    DateTime    @default(now())
  attempt      QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question     Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, attemptId])
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String
  lessonId    String
  userId      String
  submission  String?
  grade       Float?
  feedback    String?
  submittedAt DateTime?
  gradedAt    DateTime?
  createdAt   DateTime  @default(now())
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificate {
  id             String          @id @default(cuid())
  title          String
  description    String
  type           CertificateType
  userId         String
  courseId       String?
  templateData   Json
  issueDate      DateTime        @default(now())
  expiryDate     DateTime?
  certificateUrl String?
  isVerified     Boolean         @default(true)
  verificationId String          @unique @default(cuid())
  course         Course?         @relation(fields: [courseId], references: [id])
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  type        BadgeType
  iconUrl     String?
  criteria    Json
  points      Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  progress Float    @default(100)
  metadata Json?
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Notification {
  id         String             @id @default(cuid())
  title      String
  message    String
  type       NotificationType
  senderId   String
  courseId   String?
  data       Json?
  isGlobal   Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  course     Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sender     User               @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  recipients UserNotification[]
}

model UserNotification {
  id             String       @id @default(cuid())
  userId         String
  notificationId String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

model VideoFile {
  id               String                @id @default(cuid())
  originalFilename String
  mimeType         String
  fileSize         Int
  duration         Int?
  filePath         String
  thumbnailPath    String?
  processingStatus VideoProcessingStatus @default(PENDING)
  uploadedBy       String
  lessonId         String                @unique
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  lesson           Lesson                @relation("LessonVideo", fields: [lessonId], references: [id], onDelete: Cascade)
  uploader         User                  @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  INSTRUCTOR
  ADMIN
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PRIVATE
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  ASSIGNMENT
  DOCUMENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum QuizType {
  PRACTICE_QUIZ
  GRADED_QUIZ
  FINAL_EXAM
  CERTIFICATION_EXAM
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  SUBMITTED
  GRADED
}

enum CertificateType {
  COURSE_COMPLETION
  SKILL_MASTERY
  ACHIEVEMENT
}

enum BadgeType {
  COMPLETION
  MASTERY
  STREAK
  PARTICIPATION
}

enum NotificationType {
  COURSE_UPDATE
  ASSIGNMENT_DUE
  GRADE_POSTED
  BADGE_EARNED
  CERTIFICATE_ISSUED
}

enum VideoProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
