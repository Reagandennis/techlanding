generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  clerkId           String?            @unique
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              UserRole           @default(STUDENT)
  bio               String?
  
  // Enhanced profile fields
  firstName         String?
  lastName          String?
  phone             String?
  timezone          String?            @default("UTC")
  language          String?            @default("en")
  skillLevel        SkillLevel?        @default(BEGINNER)
  learningGoals     String[]
  interests         String[]
  
  // Social links
  linkedinUrl       String?
  twitterUrl        String?
  githubUrl         String?
  websiteUrl        String?
  
  // Notification preferences
  emailNotifications    Boolean        @default(true)
  pushNotifications     Boolean        @default(true)
  marketingEmails       Boolean        @default(false)
  
  // Gamification
  totalPoints       Int                @default(0)
  currentStreak     Int                @default(0)
  longestStreak     Int                @default(0)
  lastActivityDate  DateTime?
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  assignments       Assignment[]
  certificates      Certificate[]
  createdCourses    Course[]           @relation("CourseInstructor")
  enrollments       Enrollment[]
  sentNotifications Notification[]     @relation("SentNotifications")
  progress          Progress[]
  createdQuizzes    Quiz[]             @relation("QuizCreator")
  quizAttempts      QuizAttempt[]
  userBadges        UserBadge[]
  notifications     UserNotification[]
  uploadedVideos    VideoFile[]
  
  // New LMS Relations
  sentMessages      Message[]          @relation("MessageSender")
  receivedMessages  Message[]          @relation("MessageReceiver")
  forumPosts        ForumPost[]
  forumReplies      ForumReply[]
  courseReviews     Review[]
  payments          Payment[]
  subscriptions     Subscription[]
  submissions       Submission[]
  achievements      Achievement[]
  analytics         UserAnalytics[]

  @@index([email])
  @@index([clerkId])
  @@index([role])
  @@index([createdAt])
}

// Enhanced Course Management
model Course {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  description     String    @db.Text
  shortDescription String?
  thumbnail       String?
  trailerVideo    String?
  
  // Pricing
  price           Decimal   @db.Decimal(10, 2) @default(0)
  discountPrice   Decimal?  @db.Decimal(10, 2)
  currency        String    @default("USD")
  
  // Course Status
  status          CourseStatus @default(DRAFT)
  published       Boolean   @default(false)
  publishedAt     DateTime?
  
  // Course Details
  level           CourseLevel @default(BEGINNER)
  duration        Int? // in minutes
  language        String    @default("en")
  
  // SEO & Marketing
  metaTitle       String?
  metaDescription String?
  tags            String[]
  
  // Access Control
  accessCode      String?   @unique
  
  // Instructor
  instructorId    String
  instructor      User      @relation("CourseInstructor", fields: [instructorId], references: [id])
  
  // Course Structure
  modules         Module[]
  lessons         Lesson[]
  quizzes         Quiz[]
  
  // Learning Relations
  enrollments     Enrollment[]
  reviews         Review[]
  progress        Progress[]
  certificates    Certificate[]
  
  // Course Organization
  categories      CourseCategory[]
  
  // Communication
  notifications   Notification[]
  forumPosts      ForumPost[]
  
  // Analytics
  analytics       CourseAnalytics[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  @@index([slug])
  @@index([instructorId])
  @@index([published])
  @@index([status])
  @@index([level])
  @@index([accessCode])
  @@index([title])
  @@index([description])
}

// Course Structure
model Module {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  order           Int
  
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons         Lesson[]
  quizzes         Quiz[]
  assignments     Assignment[]
  
  // Requirements
  prerequisites   String[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([courseId])
  @@index([order])
}

model Category {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  courses     CourseCategory[]
}

model CourseCategory {
  courseId   String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
}

model Lesson {
  id          String       @id @default(cuid())
  title       String
  description String?
  content     String?      @db.Text
  
  // Media URLs
  videoUrl    String?
  audioUrl    String?
  documentUrl String?
  
  // Video specific
  videoThumbnail  String?
  videoTranscript String?   @db.Text
  
  // Lesson properties
  duration    Int? // in seconds
  order       Int
  type        LessonType   @default(TEXT)
  isPublished Boolean      @default(false)
  isFree      Boolean      @default(false)
  
  // Interactive Content
  interactiveContent Json?
  
  // Relations
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  moduleId    String?
  module      Module?      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  assignments Assignment[]
  progress    Progress[]
  quizzes     Quiz[]
  videoFile   VideoFile?   @relation("LessonVideo")
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([courseId])
  @@index([moduleId])
  @@index([type])
  @@index([order])
}

model Enrollment {
  id            String           @id @default(cuid())
  userId        String
  courseId      String
  status        EnrollmentStatus @default(ACTIVE)
  progress      Float            @default(0)
  enrolledAt    DateTime         @default(now())
  completedAt   DateTime?
  paymentId     String?
  paymentStatus PaymentStatus    @default(PENDING)
  paymentAmount Float?
  paidAt        DateTime?
  course        Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment       Payment?         @relation(fields: [paymentId], references: [id])

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([status])
  @@index([paymentId])
}

model Progress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  courseId    String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  timeSpent   Int?
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([courseId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  lessonId     String?
  courseId     String?
  moduleId     String?
  type         QuizType      @default(PRACTICE_QUIZ)
  timeLimit    Int?
  maxAttempts  Int           @default(3)
  passingScore Float         @default(70.0)
  totalPoints  Float         @default(100.0)
  isPublished  Boolean       @default(false)
  instructions String?
  createdBy    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  questions    Question[]
  course       Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator      User          @relation("QuizCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  lesson       Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  module       Module?       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  attempts     QuizAttempt[]

  @@index([moduleId])
}

model Question {
  id            String           @id @default(cuid())
  quizId        String
  type          QuestionType     @default(MULTIPLE_CHOICE)
  questionText  String
  explanation   String?
  points        Float            @default(1.0)
  order         Int              @default(0)
  options       Json?
  correctAnswer String?
  imageUrl      String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  quiz          Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers       QuestionAnswer[]
}

model QuizAttempt {
  id            String           @id @default(cuid())
  userId        String
  quizId        String
  attemptNumber Int              @default(1)
  score         Float            @default(0.0)
  maxScore      Float            @default(100.0)
  percentage    Float            @default(0.0)
  isPassed      Boolean          @default(false)
  startedAt     DateTime         @default(now())
  completedAt   DateTime?
  timeSpent     Int?
  status        AttemptStatus    @default(IN_PROGRESS)
  submittedAt   DateTime?
  feedback      String?
  answers       QuestionAnswer[]
  quiz          Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId, attemptNumber])
}

model QuestionAnswer {
  id           String      @id @default(cuid())
  questionId   String
  attemptId    String
  answer       String
  isCorrect    Boolean     @default(false)
  pointsEarned Float       @default(0.0)
  timeSpent    Int?
  createdAt    DateTime    @default(now())
  attempt      QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question     Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, attemptId])
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String
  lessonId    String
  moduleId    String?
  userId      String
  submission  String?
  grade       Float?
  feedback    String?
  submittedAt DateTime?
  gradedAt    DateTime?
  createdAt   DateTime  @default(now())
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  module      Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@index([moduleId])
}

model Certificate {
  id             String          @id @default(cuid())
  title          String
  description    String
  type           CertificateType
  userId         String
  courseId       String?
  templateData   Json
  issueDate      DateTime        @default(now())
  expiryDate     DateTime?
  certificateUrl String?
  isVerified     Boolean         @default(true)
  verificationId String          @unique @default(cuid())
  course         Course?         @relation(fields: [courseId], references: [id])
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  type        BadgeType
  iconUrl     String?
  criteria    Json
  points      Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  progress Float    @default(100)
  metadata Json?
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Notification {
  id         String             @id @default(cuid())
  title      String
  message    String
  type       NotificationType
  senderId   String
  courseId   String?
  data       Json?
  isGlobal   Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  course     Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sender     User               @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  recipients UserNotification[]
}

model UserNotification {
  id             String       @id @default(cuid())
  userId         String
  notificationId String
  isRead         Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

model VideoFile {
  id               String                @id @default(cuid())
  originalFilename String
  mimeType         String
  fileSize         Int
  duration         Int?
  filePath         String
  thumbnailPath    String?
  processingStatus VideoProcessingStatus @default(PENDING)
  uploadedBy       String
  lessonId         String                @unique
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  lesson           Lesson                @relation("LessonVideo", fields: [lessonId], references: [id], onDelete: Cascade)
  uploader         User                  @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  INSTRUCTOR
  ADMIN
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PRIVATE
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  ASSIGNMENT
  DOCUMENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum QuizType {
  PRACTICE_QUIZ
  GRADED_QUIZ
  FINAL_EXAM
  CERTIFICATION_EXAM
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  SUBMITTED
  GRADED
}

enum CertificateType {
  COURSE_COMPLETION
  SKILL_MASTERY
  ACHIEVEMENT
}

enum BadgeType {
  COMPLETION
  MASTERY
  STREAK
  PARTICIPATION
}

enum NotificationType {
  COURSE_UPDATE
  ASSIGNMENT_DUE
  GRADE_POSTED
  BADGE_EARNED
  CERTIFICATE_ISSUED
}

enum VideoProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Additional LMS Models

// Reviews and Ratings
model Review {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  
  rating          Int // 1-5
  review          String?   @db.Text
  
  // Moderation
  isApproved      Boolean   @default(false)
  moderatedAt     DateTime?
  moderatedBy     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
  @@index([isApproved])
}

// Communication System
model Message {
  id              String    @id @default(cuid())
  
  senderId        String
  sender          User      @relation("MessageSender", fields: [senderId], references: [id])
  
  receiverId      String
  receiver        User      @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  subject         String?
  content         String    @db.Text
  
  isRead          Boolean   @default(false)
  readAt          DateTime?
  
  // Attachments
  attachments     String[]
  
  createdAt       DateTime  @default(now())
  
  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

model ForumPost {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  
  title           String
  content         String    @db.Text
  
  // Moderation
  isApproved      Boolean   @default(true)
  isPinned        Boolean   @default(false)
  
  replies         ForumReply[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([courseId])
  @@index([isApproved])
}

model ForumReply {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  postId          String
  post            ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  content         String    @db.Text
  
  // Threading
  parentReplyId   String?
  parentReply     ForumReply? @relation("ReplyThread", fields: [parentReplyId], references: [id])
  childReplies    ForumReply[] @relation("ReplyThread")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([postId])
}

// Payment & Billing
model Payment {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Payment Details
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  status          PaymentStatus
  
  // Payment Provider (Paystack)
  providerTransactionId String? @unique
  providerReference String?
  providerMetadata Json?
  
  // Related Records
  enrollments     Enrollment[]
  subscriptions   Subscription[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([providerTransactionId])
}

model Subscription {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  plan            SubscriptionPlan
  status          SubscriptionStatus
  
  // Billing
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  billingCycle    BillingCycle
  
  // Subscription Periods
  startDate       DateTime
  endDate         DateTime
  cancelledAt     DateTime?
  
  // Payment
  paymentId       String?
  payment         Payment?  @relation(fields: [paymentId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([status])
}

// Submissions for Assignments
model Submission {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  assignmentId    String
  assignment      Assignment @relation(fields: [assignmentId], references: [id])
  
  // Submission Content
  content         String?   @db.Text
  fileUrls        String[]
  
  // Grading
  score           Int?
  maxScore        Int
  feedback        String?   @db.Text
  gradedAt        DateTime?
  gradedBy        String? // User ID of grader
  
  status          SubmissionStatus @default(SUBMITTED)
  
  submittedAt     DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([assignmentId])
  @@index([status])
}

// Gamification & Achievements
model Achievement {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  type            AchievementType
  title           String
  description     String
  icon            String?
  points          Int       @default(0)
  
  earnedAt        DateTime  @default(now())
  
  @@index([userId])
  @@index([type])
}

// Analytics Models
model UserAnalytics {
  id              String    @id @default(cuid())
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Engagement Metrics
  totalWatchTime  Int       @default(0) // in seconds
  coursesEnrolled Int       @default(0)
  coursesCompleted Int      @default(0)
  certificatesEarned Int    @default(0)
  
  // Learning Streak
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  lastActivityDate DateTime?
  
  // Analytics Date
  date            DateTime  @default(now())
  
  @@unique([userId, date])
  @@index([userId])
}

model CourseAnalytics {
  id              String    @id @default(cuid())
  
  courseId        String
  course          Course    @relation(fields: [courseId], references: [id])
  
  // Enrollment Metrics
  totalEnrollments Int      @default(0)
  completionRate  Decimal   @db.Decimal(5, 2) @default(0)
  averageRating   Decimal?  @db.Decimal(3, 2)
  totalRevenue    Decimal   @db.Decimal(10, 2) @default(0)
  
  // Engagement Metrics
  averageWatchTime Int      @default(0) // in seconds
  dropOffRate     Decimal   @db.Decimal(5, 2) @default(0)
  
  // Analytics Date
  date            DateTime  @default(now())
  
  @@unique([courseId, date])
  @@index([courseId])
}

// Additional Enums
enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
  LIFETIME
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  RETURNED
  LATE
}

enum AchievementType {
  FIRST_COURSE
  COURSE_COMPLETION
  PERFECT_SCORE
  LEARNING_STREAK
  EARLY_BIRD
  NIGHT_OWL
  DISCUSSION_PARTICIPANT
  MENTOR
  CERTIFICATE_EARNER
}
